{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(commentSaga);\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport { ADD_COMMENT_REQUEST, ADD_COMMENT_SUCCESS, ADD_COMMENT_FAILURE } from '../reducers/review'; // api\n\nfunction addCommentAPI(data) {\n  return axios.post('/api/comment', data);\n} // action - reducers\n\n\nfunction addComment(action) {\n  return _regeneratorRuntime.wrap(function addComment$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result =  yield call(addCommentAPI, action.data)\n          console.log('saga addComment');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: ADD_COMMENT_SUCCESS,\n            data: action.data\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_COMMENT_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // start function\n\n\nfunction watchComment() {\n  return _regeneratorRuntime.wrap(function watchComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function commentSaga() {\n  return _regeneratorRuntime.wrap(function commentSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchComment)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/review.js"],"names":["addComment","watchComment","commentSaga","axios","all","fork","call","put","takeLatest","delay","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addCommentAPI","data","post","action","console","log","type","response"],"mappings":";;oDAeUA,U;qDAmBAC,Y;qDAKeC,W;;AAvCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SACIC,mBADJ,EAEIC,mBAFJ,EAGIC,mBAHJ,QAIO,oBAJP,C,CAMA;;AACA,SAASC,aAAT,CAAuBC,IAAvB,EAA6B;AACzB,SAAOX,KAAK,CAACY,IAAN,CAAW,cAAX,EAA2BD,IAA3B,CAAP;AACH,C,CAGD;;;AACA,SAAUd,UAAV,CAAqBgB,MAArB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAHR;AAIQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMF,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAER,mBADA;AAENG,YAAAA,IAAI,EAAEE,MAAM,CAACF;AAFP,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMP,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAEP,mBADA;AAENE,YAAAA,IAAI,EAAE,YAAIM,QAAJ,CAAaN;AAFb,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkBA;;;AACA,SAAUb,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACE,mBAAD,EAAsBV,UAAtB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACJ,YAAD,CADI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport {\r\n    ADD_COMMENT_REQUEST,\r\n    ADD_COMMENT_SUCCESS,\r\n    ADD_COMMENT_FAILURE\r\n} from '../reducers/review';\r\n\r\n// api\r\nfunction addCommentAPI(data) {\r\n    return axios.post('/api/comment', data)\r\n}\r\n\r\n\r\n// action - reducers\r\nfunction* addComment(action) {\r\n    try {\r\n        // const result =  yield call(addCommentAPI, action.data)\r\n        console.log('saga addComment');  \r\n        yield delay(1000);\r\n        yield put({\r\n            type: ADD_COMMENT_SUCCESS,\r\n            data: action.data\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: ADD_COMMENT_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// start function\r\nfunction* watchComment() {\r\n    yield takeLatest(ADD_COMMENT_REQUEST, addComment);\r\n}\r\n\r\n\r\nexport default function* commentSaga() {\r\n    yield all([\r\n      fork(watchComment),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}