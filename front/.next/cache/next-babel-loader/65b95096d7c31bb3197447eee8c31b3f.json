{"ast":null,"code":"import axios from 'axios';\nimport { all, fork, call, put, takeEvery, delay } from 'redux-saga/effects'; // saga의 effect\n// api\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n} // action - reducers\n\n\nfunction* logIn(action) {\n  // const result =  yield call(loginAPI, action.data)\n  yield delay(1000);\n\n  try {\n    yield put({\n      type: 'LOG_IN_SUCCESS',\n      data: action.payload\n    });\n  } catch (err) {\n    yield put({\n      type: 'LOG_IN_FAILURE',\n      data: err.response.data\n    });\n  }\n} // start function\n\n\nfunction* watchLogIn() {\n  yield takeEvery('LOGIN_IN_REQUEST', logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/user.js"],"names":["axios","all","fork","call","put","takeEvery","delay","loginAPI","data","post","logIn","action","type","payload","err","response","watchLogIn","userSaga"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,SAA/B,EAA0CC,KAA1C,QAAuD,oBAAvD,C,CAA4E;AAG5E;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOR,KAAK,CAACS,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH,C,CAGD;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB;AACA,QAAML,KAAK,CAAC,IAAD,CAAX;;AACA,MAAI;AACA,UAAMF,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEG,MAAM,CAACE;AAFP,KAAD,CAAT;AAIH,GALD,CAKE,OAAMC,GAAN,EAAW;AACT,UAAMV,GAAG,CAAC;AACNQ,MAAAA,IAAI,EAAE,gBADA;AAENJ,MAAAA,IAAI,EAAEM,GAAG,CAACC,QAAJ,CAAaP;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAGD;;;AACA,UAAUQ,UAAV,GAAuB;AACnB,QAAMX,SAAS,CAAC,kBAAD,EAAqBK,KAArB,CAAf;AACH;;AAGD,eAAe,UAAUO,QAAV,GAAqB;AAChC,QAAMhB,GAAG,CAAC,CACRC,IAAI,CAACc,UAAD,CADI,CAAD,CAAT;AAGH","sourcesContent":["import axios from 'axios'\r\nimport { all, fork, call, put, takeEvery, delay } from 'redux-saga/effects' // saga의 effect\r\n\r\n\r\n// api\r\nfunction loginAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\n\r\n// action - reducers\r\nfunction* logIn(action) {\r\n    // const result =  yield call(loginAPI, action.data)\r\n    yield delay(1000);\r\n    try {\r\n        yield put({\r\n            type: 'LOG_IN_SUCCESS',\r\n            data: action.payload\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: 'LOG_IN_FAILURE',\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// start function\r\nfunction* watchLogIn() {\r\n    yield takeEvery('LOGIN_IN_REQUEST', logIn)\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n      fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}