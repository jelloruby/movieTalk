{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_IN_SUCCESS } from '../reducers/user'; // api\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n} // action - reducers\n\n\nfunction* logIn(action) {\n  try {\n    // const result =  yield call(loginAPI, action.data)\n    console.log('saga login');\n    yield delay(1000);\n    yield put({\n      type: LOG_IN_SUCCESS,\n      data: _objectSpread(_objectSpread({}, action.data), {}, {\n        nickname: 'jeb'\n      })\n    });\n  } catch (err) {\n    yield put({\n      type: LOG_IN_FAILURE,\n      data: err.response.data\n    });\n  }\n} // start function\n\n\nfunction* watchLogIn() {\n  yield takeLatest(LOG_IN_REQUEST, logIn);\n}\n\nexport default function* userSaga() {\n  yield all([fork(watchLogIn)]);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/user.js"],"names":["axios","all","fork","call","put","takeLatest","delay","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_IN_SUCCESS","loginAPI","data","post","logIn","action","console","log","type","nickname","err","response","watchLogIn","userSaga"],"mappings":";;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,kBAJP,C,CAMA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH,C,CAGD;;;AACA,UAAUE,KAAV,CAAgBC,MAAhB,EAAwB;AACpB,MAAI;AACA;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AACA,UAAMV,KAAK,CAAC,IAAD,CAAX;AACA,UAAMF,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAER,cADA;AAENE,MAAAA,IAAI,kCAAOG,MAAM,CAACH,IAAd;AAAoBO,QAAAA,QAAQ,EAAE;AAA9B;AAFE,KAAD,CAAT;AAIH,GARD,CAQE,OAAMC,GAAN,EAAW;AACT,UAAMf,GAAG,CAAC;AACNa,MAAAA,IAAI,EAAET,cADA;AAENG,MAAAA,IAAI,EAAEQ,GAAG,CAACC,QAAJ,CAAaT;AAFb,KAAD,CAAT;AAIH;AACJ,C,CAGD;;;AACA,UAAUU,UAAV,GAAuB;AACnB,QAAMhB,UAAU,CAACE,cAAD,EAAiBM,KAAjB,CAAhB;AACH;;AAGD,eAAe,UAAUS,QAAV,GAAqB;AAChC,QAAMrB,GAAG,CAAC,CACRC,IAAI,CAACmB,UAAD,CADI,CAAD,CAAT;AAGH","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// api\r\nfunction loginAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\n\r\n// action - reducers\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result =  yield call(loginAPI, action.data)\r\n        console.log('saga login');  \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            data: { ...action.data, nickname: 'jeb' }\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// start function\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn);\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n      fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}