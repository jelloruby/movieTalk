{"ast":null,"code":"var _jsxFileName = \"C:\\\\codingtime\\\\movieBox\\\\front\\\\pages\\\\index.js\";\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport AppLayout from '../components/layout/AppLayout';\nimport MovieInfoSlider from '../components/slider/MovieInfoSlider';\nimport MovieMainSlider from '../components/slider/MovieMainSlider';\nimport wrapper from '../store/configureStore';\nimport { IoSearchSharp } from \"react-icons/io5\";\nimport { getpopularMovieFromTMDB, getMovieByGenreFromTMDB, getActorsFromTMDB } from './api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WrapMovieList = styled.div.withConfig({\n  displayName: \"pages__WrapMovieList\",\n  componentId: \"sc-190qa7b-0\"\n})([\"margin-bottom:3rem;\"]);\nconst TitleOfList = styled.div.withConfig({\n  displayName: \"pages__TitleOfList\",\n  componentId: \"sc-190qa7b-1\"\n})([\"font-size:2rem;\"]); // const SiteName = styled.h2`\n//     text-align: center;\n//     font-size: 6rem;\n//     color: red;\n//     position: absolute;\n//     top: 50%;\n//     left: 50%;\n//     transform: translate(-50%, -50%);\n// `\n\nconst SearchInput = styled.input.withConfig({\n  displayName: \"pages__SearchInput\",\n  componentId: \"sc-190qa7b-2\"\n})([\"background:rgb(255,255,255);width:50%;height:50px;margin:0 auto;text-align:center;border-radius:2rem;\"]);\n\nfunction Home(props) {\n  const {\n    popularMovie\n  } = props;\n  const {\n    actionMovie\n  } = props;\n  const {\n    comedyMovie\n  } = props;\n  const {\n    animationMovie\n  } = props;\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main-content\",\n      style: {\n        height: '100vh',\n        position: 'relative'\n      },\n      children: [/*#__PURE__*/_jsxDEV(MovieMainSlider, {\n        movieInfomation: popularMovie\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n          placeholder: \"\\uC601\\uD654\\uBA85\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          className: \"btn search-btn\",\n          children: /*#__PURE__*/_jsxDEV(IoSearchSharp, {\n            style: {\n              color: 'white',\n              fontSize: '2rem'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 29\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 9\n  }, this);\n}\n\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  // 쿠키의 정보가 항상 들어가도록 해주는 것!\n  const cookie = context.req ? context.req.headers.cookie : ''; // 만약 아래와 같이 설정하면 쿠키가 모든 서버에서 공유될 수 있다.\n  // axios.defaults.headers.Cookie = cookie;\n  // 그래서 쿠키를 써서 요청을 보낼 때만 쿠키를 넣어놨다가 쿠키를 쓰지 않을 때는 서버에서 공유하고 있는 쿠키를 제거하도록 한다.\n\n  axios.defaults.headers.Cookie = '';\n\n  if (context.req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  } // context 안에는 store가 들어있다.\n  // redux에 데이터가 채워진 상태로 데이터가 존재하게 된다.\n\n\n  context.store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  context.store.dispatch(END);\n  await context.store.sagaTask.toPromise();\n  const popularMovie = await getpopularMovieFromTMDB();\n  const actionMovie = await getMovieByGenreFromTMDB(28);\n  const comedyMovie = await getMovieByGenreFromTMDB(35);\n  const animationMovie = await getMovieByGenreFromTMDB(16);\n  const fantasyMovie = await getMovieByGenreFromTMDB(14);\n  const sfMovie = await getMovieByGenreFromTMDB(878);\n  return {\n    props: {\n      popularMovie: popularMovie.results,\n      actionMovie: actionMovie.results,\n      comedyMovie: comedyMovie.results,\n      animationMovie: animationMovie.results,\n      fantasyMovie: fantasyMovie.results,\n      sfMovie: sfMovie.results\n    }\n  };\n});\nexport default Home;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/pages/index.js"],"names":["React","useEffect","useDispatch","useSelector","styled","axios","END","LOAD_MY_INFO_REQUEST","AppLayout","MovieInfoSlider","MovieMainSlider","wrapper","IoSearchSharp","getpopularMovieFromTMDB","getMovieByGenreFromTMDB","getActorsFromTMDB","WrapMovieList","div","TitleOfList","SearchInput","input","Home","props","popularMovie","actionMovie","comedyMovie","animationMovie","height","position","textAlign","color","fontSize","getServerSideProps","context","cookie","req","headers","defaults","Cookie","store","dispatch","type","sagaTask","toPromise","fantasyMovie","sfMovie","results"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\nimport axios from 'axios';\r\nimport { END } from 'redux-saga';\r\n\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user'\r\nimport AppLayout from '../components/layout/AppLayout'\r\nimport MovieInfoSlider from '../components/slider/MovieInfoSlider';\r\nimport MovieMainSlider from '../components/slider/MovieMainSlider';\r\nimport wrapper from '../store/configureStore';\r\nimport { IoSearchSharp } from \"react-icons/io5\";\r\n\r\nimport { getpopularMovieFromTMDB, getMovieByGenreFromTMDB, getActorsFromTMDB } from './api/api';\r\n\r\nconst WrapMovieList = styled.div`\r\n    margin-bottom: 3rem;\r\n`\r\n\r\nconst TitleOfList = styled.div`\r\n    font-size: 2rem;\r\n`\r\n// const SiteName = styled.h2`\r\n//     text-align: center;\r\n//     font-size: 6rem;\r\n//     color: red;\r\n//     position: absolute;\r\n//     top: 50%;\r\n//     left: 50%;\r\n//     transform: translate(-50%, -50%);\r\n// `\r\nconst SearchInput = styled.input`\r\n    background: rgb(255, 255, 255);\r\n    width: 50%;\r\n    height: 50px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    border-radius: 2rem;\r\n`\r\nfunction Home(props) {\r\n    const { popularMovie } = props;\r\n    const { actionMovie } = props;\r\n    const { comedyMovie } = props;\r\n    const { animationMovie } = props;\r\n\r\n    return (\r\n        <AppLayout>\r\n            <div className=\"main-content\" style={{ height: '100vh', position: 'relative' }}>\r\n                <MovieMainSlider movieInfomation={popularMovie}></MovieMainSlider>\r\n                    <form style={{ textAlign: 'center' }}>\r\n                        <SearchInput placeholder=\"영화명을 입력해주세요.\"/>\r\n                        <button type=\"submit\" className=\"btn search-btn\">\r\n                            <IoSearchSharp style={{ color: 'white', fontSize: '2rem' }} />\r\n                        </button>\r\n                    </form>\r\n            </div>\r\n            {/* <div style={{ width: '85%', margin: '0 auto' }} className=\"movie-list\">\r\n                <WrapMovieList>\r\n                    <TitleOfList>최신 인기 영화</TitleOfList>\r\n                    { popularMovie &&\r\n                        (\r\n                            <MovieInfoSlider movieInfomation={popularMovie} />\r\n                        )\r\n                    }\r\n                </WrapMovieList>\r\n                <WrapMovieList>\r\n                    <TitleOfList>무비톡 리뷰순</TitleOfList>\r\n                </WrapMovieList>\r\n                <WrapMovieList>\r\n                    <TitleOfList>액션 | Action</TitleOfList>\r\n                    { actionMovie &&\r\n                        (\r\n                            <MovieInfoSlider movieInfomation={actionMovie} />\r\n                        )\r\n                    }\r\n                </WrapMovieList>\r\n                <WrapMovieList>\r\n                    <TitleOfList>코미디 | Drama</TitleOfList>\r\n                    { comedyMovie &&\r\n                        (\r\n                            <MovieInfoSlider movieInfomation={comedyMovie} />\r\n                        )\r\n                    }\r\n                </WrapMovieList>\r\n                <WrapMovieList>\r\n                    <TitleOfList>애니메이션 | Animation</TitleOfList>\r\n                    { animationMovie &&\r\n                        (\r\n                            <MovieInfoSlider movieInfomation={animationMovie} />\r\n                        )\r\n                    }\r\n                </WrapMovieList>\r\n            </div> */}\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    // 쿠키의 정보가 항상 들어가도록 해주는 것!\r\n    const cookie = context.req ? context.req.headers.cookie : '';\r\n    // 만약 아래와 같이 설정하면 쿠키가 모든 서버에서 공유될 수 있다.\r\n    // axios.defaults.headers.Cookie = cookie;\r\n\r\n    // 그래서 쿠키를 써서 요청을 보낼 때만 쿠키를 넣어놨다가 쿠키를 쓰지 않을 때는 서버에서 공유하고 있는 쿠키를 제거하도록 한다.\r\n    axios.defaults.headers.Cookie = '';\r\n    if (context.req && cookie) {\r\n      axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    \r\n    // context 안에는 store가 들어있다.\r\n    // redux에 데이터가 채워진 상태로 데이터가 존재하게 된다.\r\n    context.store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST\r\n    })\r\n    context.store.dispatch(END);\r\n    await context.store.sagaTask.toPromise();\r\n\r\n\r\n    const popularMovie = await getpopularMovieFromTMDB();\r\n    const actionMovie = await getMovieByGenreFromTMDB(28);\r\n    const comedyMovie = await getMovieByGenreFromTMDB(35);\r\n    const animationMovie = await getMovieByGenreFromTMDB(16);\r\n    const fantasyMovie = await getMovieByGenreFromTMDB(14);\r\n    const sfMovie = await getMovieByGenreFromTMDB(878);\r\n\r\n    return {\r\n      props: { \r\n        popularMovie: popularMovie.results, \r\n        actionMovie: actionMovie.results, \r\n        comedyMovie: comedyMovie.results,\r\n        animationMovie: animationMovie.results,\r\n        fantasyMovie: fantasyMovie.results,\r\n        sfMovie: sfMovie.results\r\n      },\r\n    }\r\n});\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}