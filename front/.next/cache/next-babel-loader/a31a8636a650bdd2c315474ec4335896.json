{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addReview),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadMyReviews),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadAllReviews),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchReview),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchMyReviews),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchAllReviews),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(reviewSaga);\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_REVIEW_REQUEST, ADD_REVIEW_SUCCESS, ADD_REVIEW_FAILURE, LOAD_MY_REVIEWS_REQUEST, LOAD_MY_REVIEWS_SUCCESS, LOAD_MY_REVIEWS_FAILURE, LOAD_ALL_REVIEWS_REQUEST, LOAD_ALL_REVIEWS_SUCCESS, LOAD_ALL_REVIEWS_FAILURE } from '../reducers/review'; // api\n\nfunction addReviewAPI(data) {\n  return axios.post('/review', data);\n}\n\nfunction loadMyReviewsAPI(data) {\n  return axios.post('/review/myReviews', data);\n}\n\nfunction loadAllReviewsAPI(data) {\n  return axios.post('/reviews', data);\n} // action - reducers\n\n\nfunction addReview(action) {\n  return _regeneratorRuntime.wrap(function addReview$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addReviewAPI, action.data);\n\n        case 3:\n          console.log('saga ADD_REVIEW');\n          _context.next = 6;\n          return put({\n            type: ADD_REVIEW_SUCCESS\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: ADD_REVIEW_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction loadMyReviews(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMyReviews$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadMyReviewsAPI, action.data);\n\n        case 3:\n          result = _context2.sent;\n          console.log('saga LOAD_MY_REVIEWS');\n          _context2.next = 7;\n          return put({\n            type: LOAD_MY_REVIEWS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_MY_REVIEWS_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n}\n\nfunction loadAllReviews(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAllReviews$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadAllReviewsAPI, action.data);\n\n        case 3:\n          result = _context3.sent;\n          console.log('saga LOAD_MY_REVIEWS');\n          _context3.next = 7;\n          return put({\n            type: LOAD_ALL_REVIEWS_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context3.next = 13;\n          break;\n\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_ALL_REVIEWS_FAILURE,\n            data: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 9]]);\n} // start function\n\n\nfunction watchReview() {\n  return _regeneratorRuntime.wrap(function watchReview$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_REVIEW_REQUEST, addReview);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchMyReviews() {\n  return _regeneratorRuntime.wrap(function watchMyReviews$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(LOAD_MY_REVIEWS_REQUEST, loadMyReviews);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchAllReviews() {\n  return _regeneratorRuntime.wrap(function watchAllReviews$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return takeLatest(LOAD_ALL_REVIEWS_REQUEST, loadAllReviews);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n}\n\nexport default function reviewSaga() {\n  return _regeneratorRuntime.wrap(function reviewSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchReview), fork(watchMyReviews), fork(watchAllReviews)]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/review.js"],"names":["addReview","loadMyReviews","loadAllReviews","watchReview","watchMyReviews","watchAllReviews","reviewSaga","axios","all","fork","call","put","takeLatest","ADD_REVIEW_REQUEST","ADD_REVIEW_SUCCESS","ADD_REVIEW_FAILURE","LOAD_MY_REVIEWS_REQUEST","LOAD_MY_REVIEWS_SUCCESS","LOAD_MY_REVIEWS_FAILURE","LOAD_ALL_REVIEWS_REQUEST","LOAD_ALL_REVIEWS_SUCCESS","LOAD_ALL_REVIEWS_FAILURE","addReviewAPI","data","post","loadMyReviewsAPI","loadAllReviewsAPI","action","console","log","type","response","result"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_REVIEW_REQUEST,\r\n    ADD_REVIEW_SUCCESS,\r\n    ADD_REVIEW_FAILURE,\r\n    LOAD_MY_REVIEWS_REQUEST,\r\n    LOAD_MY_REVIEWS_SUCCESS,\r\n    LOAD_MY_REVIEWS_FAILURE,\r\n    LOAD_ALL_REVIEWS_REQUEST,\r\n    LOAD_ALL_REVIEWS_SUCCESS,\r\n    LOAD_ALL_REVIEWS_FAILURE,\r\n} from '../reducers/review';\r\n\r\n\r\n\r\n// api\r\nfunction addReviewAPI(data) {\r\n    return axios.post('/review', data)\r\n}\r\n\r\nfunction loadMyReviewsAPI(data) {\r\n    return axios.post('/review/myReviews', data)\r\n}\r\n\r\nfunction loadAllReviewsAPI(data) {\r\n    return axios.post('/reviews', data)\r\n}\r\n\r\n\r\n\r\n// action - reducers\r\nfunction* addReview(action) {\r\n    try {\r\n        yield call(addReviewAPI, action.data)\r\n        console.log('saga ADD_REVIEW');  \r\n        yield put({\r\n            type: ADD_REVIEW_SUCCESS,\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: ADD_REVIEW_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* loadMyReviews(action) {\r\n    try {\r\n        const result = yield call(loadMyReviewsAPI, action.data)\r\n        console.log('saga LOAD_MY_REVIEWS');\r\n        yield put({\r\n            type: LOAD_MY_REVIEWS_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOAD_MY_REVIEWS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* loadAllReviews(action) {\r\n    try {\r\n        const result = yield call(loadAllReviewsAPI, action.data)\r\n        console.log('saga LOAD_MY_REVIEWS');\r\n        yield put({\r\n            type: LOAD_ALL_REVIEWS_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOAD_ALL_REVIEWS_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n\r\n// start function\r\nfunction* watchReview() {\r\n    yield takeLatest(ADD_REVIEW_REQUEST, addReview);\r\n}\r\n\r\nfunction* watchMyReviews() {\r\n    yield takeLatest(LOAD_MY_REVIEWS_REQUEST, loadMyReviews);\r\n}\r\n\r\nfunction* watchAllReviews() {\r\n    yield takeLatest(LOAD_ALL_REVIEWS_REQUEST, loadAllReviews);\r\n}\r\n\r\n\r\n\r\nexport default function* reviewSaga() {\r\n    yield all([\r\n      fork(watchReview),\r\n      fork(watchMyReviews),\r\n      fork(watchAllReviews),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}