{"ast":null,"code":"var _jsxFileName = \"C:\\\\codingtime\\\\movieBox\\\\front\\\\pages\\\\movieSearch.js\";\nimport React, { useState } from 'react';\nimport { useSelector } from 'react-redux';\nimport styled from 'styled-components';\nimport AppLayout from '../components/layout/AppLayout';\nimport { IoSearchSharp } from \"react-icons/io5\";\nimport MovieInfoLink from '../components/MovieInfoLink';\nimport { getMovieFromTMDB } from './api/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst SearchInput = styled.input.withConfig({\n  displayName: \"movieSearch__SearchInput\",\n  componentId: \"sc-2vlrdc-0\"\n})([\"width:250px;height:50px;margin:0 auto;text-align:center;border-radius:2rem;border:none;\"]);\n\nfunction movieSearch() {\n  const {\n    value\n  } = useSelector(state => state.movie);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState(\"\");\n  const {\n    0: movieList,\n    1: setMovieList\n  } = useState(false);\n  const {\n    0: IsEmptymovieList,\n    1: setIsEmptyMovieList\n  } = useState(false);\n\n  const handleInputValue = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmitValue = e => {\n    e.preventDefault();\n\n    const fetchMovieList = async () => {\n      if (value) {\n        console.log(1);\n        const fetchData = await getMovieFromTMDB(value);\n        console.log(fetchData.results);\n\n        if (!fetchData.results) {\n          setMovieList(undefined);\n          setIsEmptyMovieList(true);\n        } else {\n          setMovieList(fetchData.results);\n          setIsEmptyMovieList(false);\n        }\n      } else {\n        const fetchData = await getMovieFromTMDB(inputValue);\n        console.log(fetchData.results);\n\n        if (!fetchData.results) {\n          setMovieList(undefined);\n          setIsEmptyMovieList(true);\n        } else {\n          setMovieList(fetchData.results);\n          setIsEmptyMovieList(false);\n        }\n      }\n    };\n\n    fetchMovieList();\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleSubmitValue,\n      style: {\n        textAlign: 'center',\n        position: 'relative',\n        top: '2.5rem',\n        left: '2rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(SearchInput, {\n        placeholder: \"\\uC601\\uD654\\uBA85\\uC744 \\uC785\\uB825\\uD574\\uC8FC\\uC138\\uC694.\",\n        onChange: handleInputValue\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"btn search-btn\",\n        children: /*#__PURE__*/_jsxDEV(IoSearchSharp, {\n          style: {\n            color: 'white',\n            fontSize: '1.5rem'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [IsEmptymovieList && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uAC80\\uC0C9\\uD558\\uC2E0 \\uC601\\uD654\\uAC00 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uC2B5\\uB2C8\\uB2E4.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 25\n      }, this), movieList && /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            display: 'flex',\n            flexWrap: 'wrap',\n            width: '80%',\n            margin: '0 auto',\n            marginTop: '2rem'\n          },\n          children: movieList.map(movieItem => /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              width: '210px',\n              margin: '0 1rem'\n            },\n            children: /*#__PURE__*/_jsxDEV(MovieInfoLink, {\n              id: movieItem.id,\n              src: movieItem.poster_path,\n              koreanTitle: movieItem.title\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 88,\n              columnNumber: 41\n            }, this)\n          }, movieItem.id, false, {\n            fileName: _jsxFileName,\n            lineNumber: 87,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 29\n        }, this)\n      }, void 0, false)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 9\n  }, this);\n}\n\n; // export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\n//     context.store.dispatch({\n//         type: LOAD_MY_INFO_REQUEST\n//     })\n//     context.store.dispatch(END);\n//     await context.store.sagaTask.toPromise();\n// });\n\nexport default movieSearch;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/pages/movieSearch.js"],"names":["React","useState","useSelector","styled","AppLayout","IoSearchSharp","MovieInfoLink","getMovieFromTMDB","SearchInput","input","movieSearch","value","state","movie","inputValue","setInputValue","movieList","setMovieList","IsEmptymovieList","setIsEmptyMovieList","handleInputValue","e","target","handleSubmitValue","preventDefault","fetchMovieList","console","log","fetchData","results","undefined","textAlign","position","top","left","color","fontSize","display","flexWrap","width","margin","marginTop","map","movieItem","id","poster_path","title"],"mappings":"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","sourcesContent":["import React, { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport styled from 'styled-components';\r\n\r\nimport AppLayout from '../components/layout/AppLayout';\r\nimport { IoSearchSharp } from \"react-icons/io5\";\r\n\r\nimport MovieInfoLink from '../components/MovieInfoLink'\r\nimport { getMovieFromTMDB } from './api/api';\r\n\r\nconst SearchInput = styled.input`\r\n    width: 250px;\r\n    height: 50px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    border-radius: 2rem;\r\n    border: none;\r\n`\r\n\r\nfunction movieSearch() {\r\n    const { value } = useSelector(state => state.movie);\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n    const [movieList, setMovieList] = useState(false);\r\n    const [IsEmptymovieList, setIsEmptyMovieList] = useState(false);\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value)\r\n    };\r\n\r\n    const handleSubmitValue = (e) => {\r\n        e.preventDefault();\r\n\r\n        const fetchMovieList = async () => {\r\n            if(value) {\r\n                console.log(1);\r\n                const fetchData = await getMovieFromTMDB(value);\r\n                console.log(fetchData.results);\r\n                if(!fetchData.results) {\r\n                    setMovieList(undefined);\r\n                    setIsEmptyMovieList(true);\r\n                } else {\r\n                    setMovieList(fetchData.results);\r\n                    setIsEmptyMovieList(false);\r\n                }\r\n            } else {\r\n                const fetchData = await getMovieFromTMDB(inputValue);\r\n                console.log(fetchData.results);\r\n                if(!fetchData.results) {\r\n                    setMovieList(undefined);\r\n                    setIsEmptyMovieList(true);\r\n                } else {\r\n                    setMovieList(fetchData.results);\r\n                    setIsEmptyMovieList(false);\r\n                }\r\n            }\r\n        }\r\n        fetchMovieList();\r\n    };\r\n    \r\n    return (\r\n        <AppLayout>\r\n            <form\r\n                onSubmit={handleSubmitValue}\r\n                style={{ textAlign: 'center', position: 'relative', top: '2.5rem', left: '2rem' }}\r\n            >\r\n                <SearchInput\r\n                    placeholder=\"영화명을 입력해주세요.\"\r\n                    onChange={handleInputValue}\r\n                />\r\n                <button type=\"submit\" className=\"btn search-btn\">\r\n                    <IoSearchSharp style={{ color: 'white', fontSize: '1.5rem' }} />\r\n                </button>\r\n            </form>\r\n            <div>\r\n                {\r\n                    IsEmptymovieList && (\r\n                        <div>검색하신 영화가 존재하지 않습니다.</div>\r\n                    )\r\n                }\r\n                {\r\n                    movieList && (\r\n                        <>\r\n                            <div style={{ display: 'flex', flexWrap: 'wrap', width: '80%', margin: '0 auto', marginTop: '2rem' }}>\r\n                            {\r\n                                movieList.map(movieItem => (\r\n                                    <div key={movieItem.id} style={{ width: '210px', margin: '0 1rem' }}>\r\n                                        <MovieInfoLink\r\n                                            id={movieItem.id}\r\n                                            src={movieItem.poster_path}\r\n                                            koreanTitle={movieItem.title}\r\n                                        />\r\n                                    </div>\r\n                                ))\r\n                            }\r\n                            </div>\r\n                        </>\r\n                    )\r\n                }\r\n            </div>\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\n// export const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n//     context.store.dispatch({\r\n//         type: LOAD_MY_INFO_REQUEST\r\n//     })\r\n//     context.store.dispatch(END);\r\n//     await context.store.sagaTask.toPromise();\r\n// });\r\n\r\nexport default movieSearch;"]},"metadata":{},"sourceType":"module"}