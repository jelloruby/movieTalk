{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nexport var initialState = {\n  addCommentDone: false,\n  posts: []\n};\nexport var ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport var ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\nexport var ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\nexport var addCommentRequestAction = function addCommentRequestAction(data) {\n  return {\n    type: ADD_COMMENT_REQUEST,\n    data: data\n  };\n};\n\nvar reducer = function reducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initialState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case ADD_COMMENT_REQUEST:\n      console.log('reducer comment - comment');\n      return state = _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true\n      });\n\n    case ADD_COMMENT_SUCCESS:\n      console.log('reducer comment after 1s - comment');\n      return state = _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: true,\n        posts: [].concat(_toConsumableArray(state.posts), [action.data.comment])\n      });\n\n    case ADD_COMMENT_FAILURE:\n      return state = _objectSpread(_objectSpread({}, state), {}, {\n        addCommentDone: false\n      });\n\n    default:\n      return state;\n  }\n};\n\nexport default reducer;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/reducers/review.js"],"names":["initialState","addCommentDone","posts","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","addCommentRequestAction","data","type","reducer","state","action","console","log","comment"],"mappings":";;;;;;;AAAA,OAAO,IAAMA,YAAY,GAAG;AACxBC,EAAAA,cAAc,EAAE,KADQ;AAExBC,EAAAA,KAAK,EAAE;AAFiB,CAArB;AAKP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AACP,OAAO,IAAMC,mBAAmB,GAAG,qBAA5B;AAEP,OAAO,IAAMC,uBAAuB,GAAG,SAA1BA,uBAA0B,CAACC,IAAD;AAAA,SAAW;AAC9CC,IAAAA,IAAI,EAAEL,mBADwC;AAE9CI,IAAAA,IAAI,EAAJA;AAF8C,GAAX;AAAA,CAAhC;;AAMP,IAAME,OAAO,GAAG,SAAVA,OAAU,GAAgC;AAAA,MAA/BC,KAA+B,uEAAzBV,YAAyB;AAAA,MAAXW,MAAW;;AAC5C,UAAQA,MAAM,CAACH,IAAf;AACI,SAAKL,mBAAL;AACIS,MAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,aAAOH,KAAK,mCACLA,KADK;AAERT,QAAAA,cAAc,EAAE;AAFR,QAAZ;;AAIJ,SAAKG,mBAAL;AACIQ,MAAAA,OAAO,CAACC,GAAR,CAAY,oCAAZ;AACA,aAAOH,KAAK,mCACLA,KADK;AAERT,QAAAA,cAAc,EAAE,IAFR;AAGRC,QAAAA,KAAK,+BAAOQ,KAAK,CAACR,KAAb,IAAoBS,MAAM,CAACJ,IAAP,CAAYO,OAAhC;AAHG,QAAZ;;AAKJ,SAAKT,mBAAL;AACI,aAAOK,KAAK,mCACLA,KADK;AAERT,QAAAA,cAAc,EAAE;AAFR,QAAZ;;AAIJ;AACI,aAAOS,KAAP;AApBR;AAsBH,CAvBD;;AAyBA,eAAeD,OAAf","sourcesContent":["export const initialState = {\r\n    addCommentDone: false,\r\n    posts: [],\r\n};\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMENT_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMENT_FAILURE';\r\n\r\nexport const addCommentRequestAction = (data) => ({\r\n    type: ADD_COMMENT_REQUEST,\r\n    data,\r\n});\r\n\r\n\r\nconst reducer = (state=initialState, action) => {\r\n    switch (action.type) {\r\n        case ADD_COMMENT_REQUEST:\r\n            console.log('reducer comment - comment');\r\n            return state = {\r\n                ...state,\r\n                addCommentDone: true,\r\n            }\r\n        case ADD_COMMENT_SUCCESS:\r\n            console.log('reducer comment after 1s - comment');\r\n            return state = {\r\n                ...state,\r\n                addCommentDone: true,\r\n                posts: [ ...state.posts, action.data.comment ]\r\n            }\r\n        case ADD_COMMENT_FAILURE:\r\n            return state = {\r\n                ...state,\r\n                addCommentDone: false,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}