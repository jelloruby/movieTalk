{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(loadMovieFromTMDB),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadMovieFromTMDB),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(tmdbSaga);\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { LOAD_MOVIE_FROM_TMDB_REQUEST, LOAD_MOVIE_FROM_TMDB_SUCCESS, LOAD_MOVIE_FROM_TMDB_FAILURE } from '../reducers/tmdb';\n\nfunction loadMovieFromTMDBAPI(data) {\n  return axios.get(\"https://api.themoviedb.org/3/search/movie?api_key=2b2e61361a6d20a07e728e56fc296333&query=\".concat(data.movieName, \"&language=ko&page=\").concat(data.pageNum));\n}\n\nfunction loadMovieFromTMDB(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadMovieFromTMDB$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(loadMovieFromTMDBAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('saga LOAD_MOVIE_FROM_TMDB');\n          _context.next = 7;\n          return put({\n            type: LOAD_MOVIE_FROM_TMDB_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: LOAD_MOVIE_FROM_TMDB_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction watchLoadMovieFromTMDB() {\n  return _regeneratorRuntime.wrap(function watchLoadMovieFromTMDB$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOAD_MOVIE_FROM_TMDB_REQUEST, loadMovieFromTMDB);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function tmdbSaga() {\n  return _regeneratorRuntime.wrap(function tmdbSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLoadMovieFromTMDB)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/tmdb.js"],"names":["loadMovieFromTMDB","watchLoadMovieFromTMDB","tmdbSaga","axios","all","fork","call","put","takeLatest","LOAD_MOVIE_FROM_TMDB_REQUEST","LOAD_MOVIE_FROM_TMDB_SUCCESS","LOAD_MOVIE_FROM_TMDB_FAILURE","loadMovieFromTMDBAPI","data","get","movieName","pageNum","action","result","console","log","type","response"],"mappings":";;oDAcUA,iB;qDAiBAC,sB;qDAKeC,Q;;AApCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACIC,4BADJ,EAEIC,4BAFJ,EAGIC,4BAHJ,QAIO,kBAJP;;AAOA,SAASC,oBAAT,CAA8BC,IAA9B,EAAoC;AAChC,SAAOV,KAAK,CAACW,GAAN,oGAAsGD,IAAI,CAACE,SAA3G,+BAAyIF,IAAI,CAACG,OAA9I,EAAP;AACH;;AAGD,SAAUhB,iBAAV,CAA4BiB,MAA5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMX,IAAI,CAACM,oBAAD,EAAuBK,MAAM,CAACJ,IAA9B,CAAV;;AAFvB;AAEcK,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AAHR;AAIQ,iBAAMb,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEX,4BADA;AAENG,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMN,GAAG,CAAC;AACNc,YAAAA,IAAI,EAAEV,4BADA;AAENE,YAAAA,IAAI,EAAE,YAAIS,QAAJ,CAAaT;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAiBA,SAAUZ,sBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACC,4BAAD,EAA+BT,iBAA/B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACJ,sBAAD,CADI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    LOAD_MOVIE_FROM_TMDB_REQUEST,\r\n    LOAD_MOVIE_FROM_TMDB_SUCCESS,\r\n    LOAD_MOVIE_FROM_TMDB_FAILURE,\r\n} from '../reducers/tmdb';\r\n\r\n\r\nfunction loadMovieFromTMDBAPI(data) {\r\n    return axios.get(`https://api.themoviedb.org/3/search/movie?api_key=2b2e61361a6d20a07e728e56fc296333&query=${data.movieName}&language=ko&page=${data.pageNum}`)\r\n}\r\n\r\n\r\nfunction* loadMovieFromTMDB(action) {\r\n    try {\r\n        const result = yield call(loadMovieFromTMDBAPI, action.data)\r\n        console.log('saga LOAD_MOVIE_FROM_TMDB');  \r\n        yield put({\r\n            type: LOAD_MOVIE_FROM_TMDB_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOAD_MOVIE_FROM_TMDB_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\nfunction* watchLoadMovieFromTMDB() {\r\n    yield takeLatest(LOAD_MOVIE_FROM_TMDB_REQUEST, loadMovieFromTMDB);\r\n}\r\n\r\n\r\nexport default function* tmdbSaga() {\r\n    yield all([\r\n      fork(watchLoadMovieFromTMDB),\r\n      \r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}