{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { HYDRATE } from 'next-redux-wrapper';\nimport { combineReducers } from 'redux';\nimport user from '../reducers/user';\nimport comment from '../reducers/comment';\n\nconst rootReducer = (state, action) => {\n  switch (action.type) {\n    case HYDRATE:\n      return _objectSpread(_objectSpread({}, state), action.payload);\n\n    default:\n      {\n        const combinedReducer = combineReducers({\n          user,\n          comment\n        });\n        return combinedReducer(state, action);\n      }\n  }\n};\n\nexport default rootReducer;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/reducers/index.js"],"names":["HYDRATE","combineReducers","user","comment","rootReducer","state","action","type","payload","combinedReducer"],"mappings":";;;;;;AAAA,SAASA,OAAT,QAAwB,oBAAxB;AACA,SAASC,eAAT,QAAgC,OAAhC;AACA,OAAOC,IAAP,MAAiB,kBAAjB;AACA,OAAOC,OAAP,MAAoB,qBAApB;;AAGA,MAAMC,WAAW,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACnC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKP,OAAL;AACI,6CAAWK,KAAX,GAAqBC,MAAM,CAACE,OAA5B;;AACJ;AAAS;AACL,cAAMC,eAAe,GAAGR,eAAe,CAAC;AACpCC,UAAAA,IADoC;AAEpCC,UAAAA;AAFoC,SAAD,CAAvC;AAIA,eAAOM,eAAe,CAACJ,KAAD,EAAQC,MAAR,CAAtB;AACH;AATL;AAWH,CAZD;;AAcA,eAAeF,WAAf","sourcesContent":["import { HYDRATE } from 'next-redux-wrapper';\r\nimport { combineReducers } from 'redux';\r\nimport user from '../reducers/user'\r\nimport comment from '../reducers/comment'\r\n\r\n\r\nconst rootReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case HYDRATE:\r\n            return {...state, ...action.payload};\r\n        default: {\r\n            const combinedReducer = combineReducers({\r\n                user,\r\n                comment,\r\n            });\r\n            return combinedReducer(state, action);\r\n        }\r\n    }\r\n};\r\n\r\nexport default rootReducer;\r\n"]},"metadata":{},"sourceType":"module"}