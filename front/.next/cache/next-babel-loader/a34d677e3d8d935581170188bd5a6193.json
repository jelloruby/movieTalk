{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(logIn),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchLogIn),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(userSaga);\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\nimport { LOG_IN_REQUEST, LOG_IN_FAILURE, LOG_IN_SUCCESS } from '../reducers/user'; // api\n\nfunction loginAPI(data) {\n  return axios.post('/api/login', data);\n} // action - reducers\n\n\nfunction logIn(action) {\n  return _regeneratorRuntime.wrap(function logIn$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          // const result =  yield call(loginAPI, action.data)\n          console.log('saga login');\n          _context.next = 4;\n          return delay(1000);\n\n        case 4:\n          _context.next = 6;\n          return put({\n            type: LOG_IN_SUCCESS,\n            payload: action.payload\n          });\n\n        case 6:\n          _context.next = 12;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 12;\n          return put({\n            type: LOG_IN_FAILURE,\n            payload: _context.t0.response.data\n          });\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n} // start function\n\n\nfunction watchLogIn() {\n  return _regeneratorRuntime.wrap(function watchLogIn$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(LOG_IN_REQUEST, logIn);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function userSaga() {\n  return _regeneratorRuntime.wrap(function userSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchLogIn)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/user.js"],"names":["logIn","watchLogIn","userSaga","axios","all","fork","call","put","takeLatest","delay","LOG_IN_REQUEST","LOG_IN_FAILURE","LOG_IN_SUCCESS","loginAPI","data","post","action","console","log","type","payload","response"],"mappings":";;oDAeUA,K;qDAmBAC,U;qDAKeC,Q;;AAvCzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,EAA2CC,KAA3C,QAAwD,oBAAxD;AACA,SACIC,cADJ,EAEIC,cAFJ,EAGIC,cAHJ,QAIO,kBAJP,C,CAMA;;AACA,SAASC,QAAT,CAAkBC,IAAlB,EAAwB;AACpB,SAAOX,KAAK,CAACY,IAAN,CAAW,YAAX,EAAyBD,IAAzB,CAAP;AACH,C,CAGD;;;AACA,SAAUd,KAAV,CAAgBgB,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAEQ;AACAC,UAAAA,OAAO,CAACC,GAAR,CAAY,YAAZ;AAHR;AAIQ,iBAAMT,KAAK,CAAC,IAAD,CAAX;;AAJR;AAAA;AAKQ,iBAAMF,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAEP,cADA;AAENQ,YAAAA,OAAO,EAAEJ,MAAM,CAACI;AAFV,WAAD,CAAT;;AALR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAUQ,iBAAMb,GAAG,CAAC;AACNY,YAAAA,IAAI,EAAER,cADA;AAENS,YAAAA,OAAO,EAAE,YAAIC,QAAJ,CAAaP;AAFhB,WAAD,CAAT;;AAVR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAkBA;;;AACA,SAAUb,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACE,cAAD,EAAiBV,KAAjB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACJ,UAAD,CADI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest, delay } from 'redux-saga/effects';\r\nimport {\r\n    LOG_IN_REQUEST,\r\n    LOG_IN_FAILURE,\r\n    LOG_IN_SUCCESS,\r\n} from '../reducers/user';\r\n\r\n// api\r\nfunction loginAPI(data) {\r\n    return axios.post('/api/login', data)\r\n}\r\n\r\n\r\n// action - reducers\r\nfunction* logIn(action) {\r\n    try {\r\n        // const result =  yield call(loginAPI, action.data)\r\n        console.log('saga login');  \r\n        yield delay(1000);\r\n        yield put({\r\n            type: LOG_IN_SUCCESS,\r\n            payload: action.payload\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOG_IN_FAILURE,\r\n            payload: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// start function\r\nfunction* watchLogIn() {\r\n    yield takeLatest(LOG_IN_REQUEST, logIn)\r\n}\r\n\r\n\r\nexport default function* userSaga() {\r\n    yield all([\r\n      fork(watchLogIn),\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}