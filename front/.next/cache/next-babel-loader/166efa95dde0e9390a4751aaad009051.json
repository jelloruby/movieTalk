{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addReview),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(loadAllReview),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchReview),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadAllReview),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(reviewSaga);\n\nimport axios from 'axios';\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\nimport { ADD_REVIEW_REQUEST, ADD_REVIEW_SUCCESS, ADD_REVIEW_FAILURE, LOAD_ALL_REVIEW_REQUEST, LOAD_ALL_REVIEW_SUCCESS, LOAD_ALL_REVIEW_FAILURE } from '../reducers/review'; // api\n\nfunction addReviewAPI(data) {\n  return axios.post('/review', data);\n}\n\nfunction loadAllReviewAPI() {\n  return axios.get('/review/all');\n} // action - reducers\n\n\nfunction addReview(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addReview$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addReviewAPI, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log('saga ADD_REVIEW');\n          _context.next = 7;\n          return put({\n            type: ADD_REVIEW_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 13;\n          break;\n\n        case 9:\n          _context.prev = 9;\n          _context.t0 = _context[\"catch\"](0);\n          _context.next = 13;\n          return put({\n            type: ADD_REVIEW_FAILURE,\n            data: _context.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 9]]);\n}\n\nfunction loadAllReview() {\n  var result;\n  return _regeneratorRuntime.wrap(function loadAllReview$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(loadAllReviewAPI);\n\n        case 3:\n          result = _context2.sent;\n          console.log('saga LOAD_ALL_REVIEW');\n          _context2.next = 7;\n          return put({\n            type: LOAD_ALL_REVIEW_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context2.next = 13;\n          break;\n\n        case 9:\n          _context2.prev = 9;\n          _context2.t0 = _context2[\"catch\"](0);\n          _context2.next = 13;\n          return put({\n            type: LOAD_ALL_REVIEW_FAILURE,\n            data: _context2.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 9]]);\n} // start function\n\n\nfunction watchReview() {\n  return _regeneratorRuntime.wrap(function watchReview$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_REVIEW_REQUEST, addReview);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nfunction watchLoadAllReview() {\n  return _regeneratorRuntime.wrap(function watchLoadAllReview$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(LOAD_ALL_REVIEW_REQUEST, loadAllReview);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nexport default function reviewSaga() {\n  return _regeneratorRuntime.wrap(function reviewSaga$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return all([fork(watchReview), fork(watchLoadAllReview)]);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}","map":{"version":3,"sources":["C:/codingtime/movieBox/front/sagas/review.js"],"names":["addReview","loadAllReview","watchReview","watchLoadAllReview","reviewSaga","axios","all","fork","call","put","takeLatest","ADD_REVIEW_REQUEST","ADD_REVIEW_SUCCESS","ADD_REVIEW_FAILURE","LOAD_ALL_REVIEW_REQUEST","LOAD_ALL_REVIEW_SUCCESS","LOAD_ALL_REVIEW_FAILURE","addReviewAPI","data","post","loadAllReviewAPI","get","action","result","console","log","type","response"],"mappings":";;oDAsBUA,S;qDAgBAC,a;qDAkBAC,W;qDAIAC,kB;qDAIeC,U;;AAhEzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,IAApB,EAA0BC,GAA1B,EAA+BC,UAA/B,QAAiD,oBAAjD;AACA,SACIC,kBADJ,EAEIC,kBAFJ,EAGIC,kBAHJ,EAIIC,uBAJJ,EAKIC,uBALJ,EAMIC,uBANJ,QAOO,oBAPP,C,CASA;;AACA,SAASC,YAAT,CAAsBC,IAAtB,EAA4B;AACxB,SAAOb,KAAK,CAACc,IAAN,CAAW,SAAX,EAAsBD,IAAtB,CAAP;AACH;;AAED,SAASE,gBAAT,GAA4B;AACxB,SAAOf,KAAK,CAACgB,GAAN,CAAU,aAAV,CAAP;AACH,C,CAGD;;;AACA,SAAUrB,SAAV,CAAoBsB,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEwB,iBAAMd,IAAI,CAACS,YAAD,EAAeK,MAAM,CAACJ,IAAtB,CAAV;;AAFxB;AAEcK,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AAHR;AAIQ,iBAAMhB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEd,kBADA;AAENM,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMT,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEb,kBADA;AAENK,YAAAA,IAAI,EAAE,YAAIS,QAAJ,CAAaT;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAgBA,SAAUjB,aAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEwB,iBAAMO,IAAI,CAACY,gBAAD,CAAV;;AAFxB;AAEcG,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AAHR;AAIQ,iBAAMhB,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEX,uBADA;AAENG,YAAAA,IAAI,EAAEK,MAAM,CAACL;AAFP,WAAD,CAAT;;AAJR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AASQ,iBAAMT,GAAG,CAAC;AACNiB,YAAAA,IAAI,EAAEV,uBADA;AAENE,YAAAA,IAAI,EAAE,aAAIS,QAAJ,CAAaT;AAFb,WAAD,CAAT;;AATR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;;;AACA,SAAUhB,WAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMQ,UAAU,CAACC,kBAAD,EAAqBX,SAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUG,kBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACI,uBAAD,EAA0Bb,aAA1B,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,eAAe,SAAUG,UAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACRC,IAAI,CAACL,WAAD,CADI,EAERK,IAAI,CAACJ,kBAAD,CAFI,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from 'axios';\r\nimport { all, fork, call, put, takeLatest } from 'redux-saga/effects';\r\nimport {\r\n    ADD_REVIEW_REQUEST,\r\n    ADD_REVIEW_SUCCESS,\r\n    ADD_REVIEW_FAILURE,\r\n    LOAD_ALL_REVIEW_REQUEST,\r\n    LOAD_ALL_REVIEW_SUCCESS,\r\n    LOAD_ALL_REVIEW_FAILURE\r\n} from '../reducers/review';\r\n\r\n// api\r\nfunction addReviewAPI(data) {\r\n    return axios.post('/review', data)\r\n}\r\n\r\nfunction loadAllReviewAPI() {\r\n    return axios.get('/review/all')\r\n}\r\n\r\n\r\n// action - reducers\r\nfunction* addReview(action) {\r\n    try {\r\n        const result =  yield call(addReviewAPI, action.data)\r\n        console.log('saga ADD_REVIEW');  \r\n        yield put({\r\n            type: ADD_REVIEW_SUCCESS,\r\n            data: result.data\r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: ADD_REVIEW_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\nfunction* loadAllReview() {\r\n    try {\r\n        const result =  yield call(loadAllReviewAPI)\r\n        console.log('saga LOAD_ALL_REVIEW');  \r\n        yield put({\r\n            type: LOAD_ALL_REVIEW_SUCCESS,\r\n            data: result.data \r\n        })\r\n    } catch(err) {\r\n        yield put({\r\n            type: LOAD_ALL_REVIEW_FAILURE,\r\n            data: err.response.data\r\n        })\r\n    }\r\n}\r\n\r\n\r\n// start function\r\nfunction* watchReview() {\r\n    yield takeLatest(ADD_REVIEW_REQUEST, addReview);\r\n}\r\n\r\nfunction* watchLoadAllReview() {\r\n    yield takeLatest(LOAD_ALL_REVIEW_REQUEST, loadAllReview);\r\n}\r\n\r\nexport default function* reviewSaga() {\r\n    yield all([\r\n      fork(watchReview),\r\n      fork(watchLoadAllReview),\r\n\r\n    ]);\r\n}"]},"metadata":{},"sourceType":"module"}