{"ast":null,"code":"var _jsxFileName = \"C:\\\\codingtime\\\\movieBox\\\\front\\\\pages\\\\movieTalk\\\\[id].js\";\nimport React, { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Router from 'next/router';\nimport styled from 'styled-components';\nimport SubPageLayout from '../../components/layout/SubPageLayout';\nimport { imageURL } from '../../config/config';\nimport { getMovieDetailFromTMDB } from '../api/api';\nimport { addReviewRequestAction } from '../../reducers/review';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MovieReviewWrap = styled.div.withConfig({\n  displayName: \"id__MovieReviewWrap\",\n  componentId: \"sc-1te2pjt-0\"\n})([\"width:80%;margin:0 auto;margin-top:48px;display:flex;\"]);\n\nfunction createMovieTalk(props) {\n  const dispatch = useDispatch();\n  const {\n    movieDetail\n  } = props;\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    addReviewDone\n  } = useSelector(state => state.review);\n  console.log(addReviewDone);\n  const {\n    0: Review,\n    1: setReview\n  } = useState(\"\");\n  useEffect(() => {\n    if (!(me && me.email)) {\n      const didDelete = confirm('로그인이 필요합니다. 로그인 화면으로 이동하시겠습니까?');\n\n      if (didDelete) {\n        Router.push('/login');\n      } else {\n        Router.back();\n      }\n    }\n\n    ;\n  }, [me && me.id]);\n\n  const onReviewHandler = e => {\n    setReview(e.currentTarget.value);\n  };\n\n  const handleSubmitReview = e => {\n    e.preventDefault();\n    const body = {\n      writer: me._id,\n      image: `${imageURL}/original${movieDetail.poster_path}`,\n      name: me.name,\n      rating: 5,\n      text: Review,\n      likes: 0\n    };\n    dispatch(addReviewRequestAction(body));\n    Router.push('/myPage');\n  };\n\n  return /*#__PURE__*/_jsxDEV(SubPageLayout, {\n    children: /*#__PURE__*/_jsxDEV(MovieReviewWrap, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          width: '50%'\n        },\n        children: [me && me.name && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [me.name, \"\\uB2D8\\uC758 \\uB9AC\\uBDF0\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 29\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: /*#__PURE__*/_jsxDEV(\"img\", {\n            src: `${imageURL}/w200/${movieDetail.poster_path}`,\n            style: {\n              borderRadius: '5px'\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [movieDetail.title, \"(\", movieDetail.release_date.slice(0, 4), \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 71,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: handleSubmitReview,\n        style: {\n          width: '50%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"textarea\", {\n          placeholder: \"\\uC601\\uD654 \\uB9AC\\uBDF0\\uB97C \\uC801\\uC5B4\\uC8FC\\uC138\\uC694.\",\n          onChange: onReviewHandler,\n          style: {\n            width: '500px',\n            height: '500px'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          type: \"submit\",\n          children: \"\\uC81C\\uCD9C\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 79,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n;\nexport async function getServerSideProps({\n  query\n}) {\n  const movieDetail = await getMovieDetailFromTMDB(query.id);\n  return {\n    props: {\n      movieDetail: movieDetail\n    }\n  };\n}\n;\nexport default createMovieTalk;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/pages/movieTalk/[id].js"],"names":["React","useEffect","useState","useDispatch","useSelector","Router","styled","SubPageLayout","imageURL","getMovieDetailFromTMDB","addReviewRequestAction","MovieReviewWrap","div","createMovieTalk","props","dispatch","movieDetail","me","state","user","addReviewDone","review","console","log","Review","setReview","email","didDelete","confirm","push","back","id","onReviewHandler","e","currentTarget","value","handleSubmitReview","preventDefault","body","writer","_id","image","poster_path","name","rating","text","likes","width","borderRadius","title","release_date","slice","height","getServerSideProps","query"],"mappings":"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","sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport Router from 'next/router';\r\nimport styled from 'styled-components'\r\n\r\nimport SubPageLayout from '../../components/layout/SubPageLayout';\r\nimport { imageURL } from '../../config/config';\r\nimport { getMovieDetailFromTMDB } from '../api/api';\r\nimport { addReviewRequestAction } from '../../reducers/review';\r\n\r\nconst MovieReviewWrap = styled.div`\r\n    width: 80%;\r\n    margin: 0 auto;\r\n    margin-top: 48px;\r\n    display: flex;\r\n`\r\n\r\nfunction createMovieTalk(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    const { movieDetail } = props;\r\n    const { me } = useSelector((state) => state.user);\r\n    const { addReviewDone } = useSelector((state) => state.review);\r\n    console.log(addReviewDone);\r\n    \r\n    const [Review, setReview] = useState(\"\");\r\n    \r\n    useEffect(() => {\r\n        if (!(me && me.email)) {\r\n            const didDelete = confirm('로그인이 필요합니다. 로그인 화면으로 이동하시겠습니까?');\r\n            if(didDelete) {\r\n                Router.push('/login');\r\n            } else {\r\n                Router.back();\r\n            }\r\n        };\r\n    }, [me && me.id]);\r\n\r\n\r\n    const onReviewHandler = (e) => {\r\n        setReview(e.currentTarget.value)\r\n    };\r\n\r\n    const handleSubmitReview = (e) => {\r\n        e.preventDefault();\r\n        const body = {\r\n            writer: me._id,\r\n            image: `${imageURL}/original${movieDetail.poster_path}`,\r\n            name: me.name,\r\n            rating: 5,\r\n            text: Review,\r\n            likes: 0,\r\n        };\r\n\r\n        dispatch(addReviewRequestAction(body));\r\n        Router.push('/myPage');\r\n    };\r\n\r\n    return (\r\n        <SubPageLayout>\r\n            <MovieReviewWrap>\r\n                <div style={{ width: '50%' }}>\r\n                    { (me && me.name) &&\r\n                        (\r\n                            <div>{me.name}님의 리뷰</div>\r\n                        )\r\n                    }\r\n                    <div>\r\n                        <img src={`${imageURL}/w200/${movieDetail.poster_path}`} style={{ borderRadius: '5px' }} />\r\n                    </div>\r\n                    <div>{movieDetail.title}({movieDetail.release_date.slice(0, 4)})</div>\r\n                </div>\r\n                <form onSubmit={handleSubmitReview} style={{ width: '50%' }}>\r\n                    <textarea\r\n                        placeholder=\"영화 리뷰를 적어주세요.\"\r\n                        onChange={onReviewHandler}\r\n                        style={{ width: '500px', height: '500px' }}\r\n                    />\r\n                    <button type=\"submit\">제출</button>\r\n                </form>\r\n            </MovieReviewWrap>\r\n        </SubPageLayout>\r\n    )\r\n};\r\n\r\nexport async function getServerSideProps({ query }) {\r\n    const movieDetail = await getMovieDetailFromTMDB(query.id);\r\n    \r\n    return {\r\n        props: {\r\n            movieDetail: movieDetail,\r\n        },\r\n    };\r\n};\r\n\r\nexport default createMovieTalk;\r\n"]},"metadata":{},"sourceType":"module"}