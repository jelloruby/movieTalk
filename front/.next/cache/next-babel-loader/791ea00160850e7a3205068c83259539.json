{"ast":null,"code":"var _jsxFileName = \"C:\\\\codingtime\\\\movieBox\\\\front\\\\pages\\\\movieSearch\\\\[name].js\";\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport Router, { useRouter } from \"next/router\";\nimport { IoSearchSharp } from \"react-icons/io5\";\nimport axios from 'axios';\nimport { END } from 'redux-saga';\nimport wrapper from '../../store/configureStore';\nimport SubPageLayout from '../../components/layout/SubPageLayout';\nimport MovieInfoLink from '../../components/MovieInfoLink';\nimport { LOAD_MOVIE_FROM_TMDB_REQUEST } from '../../reducers/tmdb';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SearchInput = styled.input.withConfig({\n  displayName: \"name__SearchInput\",\n  componentId: \"irtilj-0\"\n})([\"width:250px;height:50px;margin:0 auto;text-align:center;border-radius:32px;border:none;\"]);\nconst MovieCardWrap = styled.div.withConfig({\n  displayName: \"name__MovieCardWrap\",\n  componentId: \"irtilj-1\"\n})([\"margin-left:5%;position:relative;top:128px;display:flex;flex-wrap:wrap;\"]);\n\nfunction MovieSearchPage() {\n  const dispatch = useDispatch();\n  const router = useRouter();\n  const {\n    name\n  } = router.query;\n  const {\n    movieSearchResult\n  } = useSelector(state => state.movie);\n  const {\n    0: inputValue,\n    1: setInputValue\n  } = useState(\"\");\n\n  const handleInputValue = e => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmitValue = e => {\n    e.preventDefault();\n    Router.push(`/movieSearch/${inputValue}`);\n  };\n\n  const handleLoadMoreMovie = () => {\n    dispatch({\n      type: LOAD_MOVIE_FROM_TMDB_REQUEST,\n      data: {\n        movieName: name,\n        pageNum: 2\n      }\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(SubPageLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n;\nexport const getServerSideProps = wrapper.getServerSideProps(async context => {\n  console.log(context.query.name); // context.store.dispatch({\n  //     type: LOAD_MOVIE_FROM_TMDB_REQUEST,\n  //     data: {\n  //         movieName: context.query.name,\n  //         pageNum: 1,\n  //     }\n  // });\n  // context.store.dispatch(END);\n  // await context.store.sagaTask.toPromise();\n}); // export async function getServerSideProps({ query }) {\n//     const movieDetail = await getMovieFromTMDB(encodeURI(query.name), 1);\n//     return {\n//         props: {\n//             movieDetail: movieDetail,\n//         },\n//     }\n// };\n\nexport default MovieSearchPage;","map":{"version":3,"sources":["C:/codingtime/movieBox/front/pages/movieSearch/[name].js"],"names":["React","useState","useEffect","styled","Router","useRouter","IoSearchSharp","axios","END","wrapper","SubPageLayout","MovieInfoLink","LOAD_MOVIE_FROM_TMDB_REQUEST","SearchInput","input","MovieCardWrap","div","MovieSearchPage","dispatch","useDispatch","router","name","query","movieSearchResult","useSelector","state","movie","inputValue","setInputValue","handleInputValue","e","target","value","handleSubmitValue","preventDefault","push","handleLoadMoreMovie","type","data","movieName","pageNum","getServerSideProps","context","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,mBAAnB;AACA,OAAOC,MAAP,IAAiBC,SAAjB,QAAkC,aAAlC;AACA,SAASC,aAAT,QAA8B,iBAA9B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,QAAoB,YAApB;AAEA,OAAOC,OAAP,MAAoB,4BAApB;AACA,OAAOC,aAAP,MAA0B,uCAA1B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AAEA,SAASC,4BAAT,QAA6C,qBAA7C;;AAEA,MAAMC,WAAW,GAAGV,MAAM,CAACW,KAAV;AAAA;AAAA;AAAA,+FAAjB;AASA,MAAMC,aAAa,GAAGZ,MAAM,CAACa,GAAV;AAAA;AAAA;AAAA,+EAAnB;;AAQA,SAASC,eAAT,GAA2B;AACvB,QAAMC,QAAQ,GAAGC,WAAW,EAA5B;AACA,QAAMC,MAAM,GAAGf,SAAS,EAAxB;AAEA,QAAM;AAAEgB,IAAAA;AAAF,MAAWD,MAAM,CAACE,KAAxB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAwBC,WAAW,CAAEC,KAAD,IAAWA,KAAK,CAACC,KAAlB,CAAzC;AAEA,QAAM;AAAA,OAACC,UAAD;AAAA,OAAaC;AAAb,MAA8B3B,QAAQ,CAAC,EAAD,CAA5C;;AAEA,QAAM4B,gBAAgB,GAAIC,CAAD,IAAO;AAC5BF,IAAAA,aAAa,CAACE,CAAC,CAACC,MAAF,CAASC,KAAV,CAAb;AACH,GAFD;;AAIA,QAAMC,iBAAiB,GAAIH,CAAD,IAAO;AAC7BA,IAAAA,CAAC,CAACI,cAAF;AACA9B,IAAAA,MAAM,CAAC+B,IAAP,CAAa,gBAAeR,UAAW,EAAvC;AACH,GAHD;;AAKA,QAAMS,mBAAmB,GAAG,MAAM;AAC9BlB,IAAAA,QAAQ,CAAC;AACLmB,MAAAA,IAAI,EAAEzB,4BADD;AAEL0B,MAAAA,IAAI,EAAE;AACFC,QAAAA,SAAS,EAAElB,IADT;AAEFmB,QAAAA,OAAO,EAAE;AAFP;AAFD,KAAD,CAAR;AAOH,GARD;;AAUA,sBACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAyCH;;AAAA;AAED,OAAO,MAAMC,kBAAkB,GAAGhC,OAAO,CAACgC,kBAAR,CAA2B,MAAOC,OAAP,IAAmB;AAC5EC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACpB,KAAR,CAAcD,IAA1B,EAD4E,CAE5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH,CAXiC,CAA3B,C,CAcP;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAeJ,eAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport Router, { useRouter } from \"next/router\";\r\nimport { IoSearchSharp } from \"react-icons/io5\";\r\nimport axios from 'axios';\r\nimport { END } from 'redux-saga';\r\n\r\nimport wrapper from '../../store/configureStore';\r\nimport SubPageLayout from '../../components/layout/SubPageLayout';\r\nimport MovieInfoLink from '../../components/MovieInfoLink'\r\n\r\nimport { LOAD_MOVIE_FROM_TMDB_REQUEST } from '../../reducers/tmdb';\r\n\r\nconst SearchInput = styled.input`\r\n    width: 250px;\r\n    height: 50px;\r\n    margin: 0 auto;\r\n    text-align: center;\r\n    border-radius: 32px;\r\n    border: none;\r\n`\r\n\r\nconst MovieCardWrap = styled.div`\r\n    margin-left: 5%;\r\n    position: relative;\r\n    top: 128px;\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n`\r\n\r\nfunction MovieSearchPage() {\r\n    const dispatch = useDispatch()\r\n    const router = useRouter();\r\n\r\n    const { name } = router.query;\r\n    const { movieSearchResult } = useSelector((state) => state.movie);\r\n\r\n    const [inputValue, setInputValue] = useState(\"\");\r\n\r\n    const handleInputValue = (e) => {\r\n        setInputValue(e.target.value);\r\n    };\r\n\r\n    const handleSubmitValue = (e) => {\r\n        e.preventDefault();\r\n        Router.push(`/movieSearch/${inputValue}`);\r\n    };\r\n\r\n    const handleLoadMoreMovie = () => {\r\n        dispatch({\r\n            type: LOAD_MOVIE_FROM_TMDB_REQUEST,\r\n            data: {\r\n                movieName: name,\r\n                pageNum: 2,\r\n            }\r\n        })\r\n    };\r\n\r\n    return (\r\n        <SubPageLayout>\r\n            {/* <div style={{ position: 'relative' }}>\r\n                <form\r\n                    onSubmit={handleSubmitValue}\r\n                    style={{ textAlign: 'center', position: 'absolute', top: '40px', left: '32px' }}\r\n                >\r\n                    <SearchInput\r\n                        placeholder=\"영화명을 입력해주세요.\"\r\n                        onChange={handleInputValue}\r\n                    />\r\n                    <button type=\"submit\" className=\"btn search-btn\">\r\n                        <IoSearchSharp style={{ color: 'white', fontSize: '24px' }} />\r\n                    </button>\r\n                </form>\r\n                {\r\n                    !movieSearchResult.results[0] && (\r\n                        <div>검색하신 영화가 존재하지 않습니다.</div>\r\n                    )\r\n                }\r\n                {\r\n                    movieSearchResult.results && (\r\n                        <MovieCardWrap>\r\n                        {\r\n                            movieSearchResult.results.map(movieItem => (\r\n                                <div key={movieItem.id} style={{ width: '210px', margin: '0 16px' }}>\r\n                                    <MovieInfoLink\r\n                                        id={movieItem.id}\r\n                                        src={movieItem.poster_path}\r\n                                        koreanTitle={movieItem.title}\r\n                                    />\r\n                                </div>\r\n                            ))\r\n                        }\r\n                        </MovieCardWrap>\r\n                    )\r\n                }\r\n                <button onClick={handleLoadMoreMovie}>Load More</button>\r\n            </div> */}\r\n        </SubPageLayout>\r\n    )\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(async (context) => {\r\n    console.log(context.query.name);\r\n    // context.store.dispatch({\r\n    //     type: LOAD_MOVIE_FROM_TMDB_REQUEST,\r\n    //     data: {\r\n    //         movieName: context.query.name,\r\n    //         pageNum: 1,\r\n    //     }\r\n    // });\r\n    // context.store.dispatch(END);\r\n    // await context.store.sagaTask.toPromise();\r\n});\r\n\r\n\r\n// export async function getServerSideProps({ query }) {\r\n//     const movieDetail = await getMovieFromTMDB(encodeURI(query.name), 1);\r\n    \r\n//     return {\r\n//         props: {\r\n//             movieDetail: movieDetail,\r\n//         },\r\n//     }\r\n// };\r\n\r\nexport default MovieSearchPage;\r\n"]},"metadata":{},"sourceType":"module"}